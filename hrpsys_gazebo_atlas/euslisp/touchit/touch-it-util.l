(defun move-down-with-touch-it
  ()
  (send *robot* :reset-manip-pose)
  (send *robot* :rarm :move-end-rot 90 :x :local)
  (send *robot* :rarm :move-end-pos #f(0 0 150) :world :rotation-axis :z :revert-if-fail t)
  (send *robot* :rarm :move-end-rot -15 :y :local :revert-if-fail nil)
  (when (and (boundp '*irtviewer*) *irtviewer*)
    (send *irtviewer* :draw-objects))
  (when (and (boundp '*ri*) *ri*)
    (model2real :time 3000 :wait t))
  (my-wait)
  (touch-it-control (send (send (send *robot* :rarm :end-coords) :copy-worldcoords) :translate #f(0 0 -300) :world)))

(defun move-lateral-with-touch-it
  ()
  (send *robot* :reset-manip-pose)
  (send *robot* :rarm :move-end-pos #f(0 0 -200))
  (when (and (boundp '*irtviewer*) *irtviewer*)
    (send *irtviewer* :draw-objects))
  (when (and (boundp '*ri*) *ri*)
    (model2real :time 3000 :wait t))
  (my-wait)
  (touch-it-control (send (send (send *robot* :rarm :end-coords) :copy-worldcoords) :translate #f(0 0 300))))

(defun touch-it-control
  (tc &key (arm :rarm) (ik-type arm))
  (let (f-orig ret)
    (setq f-orig (or (send *ri* :absolute-force-vector arm) #f(0 0 0)))
    (do-until-key
     (setq ret (touch-it-control-proc tc :arm arm :ik-type ik-type :i i :f-orig f-orig))
     (ros::ros-debug "[touch_it] touch-it-status is ~a~%" touch-it-status)
     (cond
      ((eq ret :arrived-at-goal)
       (return-from nil nil))
      ((eq ret :continue)
       )
      ((eq ret :touched)
       (setq ret t)
       (return-from nil t))
      ))
    (real2model)
    (model2real :time 500)
    ret)
  )
